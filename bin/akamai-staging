#!/usr/bin/env python

import argparse
from dns.resolver import dns
import docker
import json
import logging
import os
from pathlib import Path
import re
from sudo import run_as_sudo
import sys
import time
import subprocess


PACKAGE_VERSION = "0.2.2"

# Setup logging in console
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_formatter = logging.Formatter("%(message)s")
root_logger = logging.getLogger()

console_handler = logging.StreamHandler()
console_handler.setFormatter(console_formatter)
root_logger.addHandler(console_handler)

# Set Log Level to DEBUG, INFO, WARNING, ERROR, CRITICAL
root_logger.setLevel(logging.INFO)

def main():
    global cacheDir

    # define parameters
    prog = get_prog_name()
    if len(sys.argv) == 1:
        prog += " [command]"

    parser = argparse.ArgumentParser(
        description='Akamai CLI for Developer Environments',
        add_help=False,
        prog=prog)
    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s ' +
                PACKAGE_VERSION)

    subparsers = parser.add_subparsers(
        title='Commands', dest="command", metavar="")

    actions = {}

    subparsers.add_parser(
        name="help",
        help="Show available help",
        add_help=False).add_argument(
        'args',
        metavar="",
        nargs=argparse.REMAINDER)

    actions["hosts"] = create_sub_command(
        subparsers, "hosts", "Create eintries for /etc/hosts",
        None,
        [{"name": "domains", "help": "list of domains to staging; more than one domain are seperat by ','"}])
    
    actions["sandbox_start"] = create_sub_command(
        subparsers, "sandbox_start", "start sandbox for given pipeline",
        [
            {"name": "pipeline", "help": "pipeline to use in the sandbox"},
            {"name": "pipeline-dir", "help": "path to pipeline project on your system (default: .)", "default": os.getcwd()},
            {"name": "pipeline-env", "help": "the environment on the pipeline (default: stage)", "default": "stage"},
            {"name": "property", "help": "name of the property manager config"},
            {"name": "property-domain", "help": "domain to use with the property manager config"}
        ],
        [
            {"name": "type", "help": "configure the sandbox with a local pipeline checkout or use a config from property manager. (pipeline|property)"}
        ]
    )

    actions["sandbox_stop"] = create_sub_command(
        subparsers, "sandbox_stop", "stop sandbox for given pipeline",
        [
            {"name": "pipeline", "help": "stop sandbox for this pipeline"},
            {"name": "pipeline-env", "help": "the environment on the pipeline (default: stage)", "default": "stage"},
            {"name": "property-domain", "help": "domain to use with the property manager config"}
        ],
        [
            {"name": "type", "help": "configure the sandbox with a local pipeline checkout or use a config from property manager. (pipeline|property)"}
        ]
    )

    actions["sandbox_renew"] = create_sub_command(
        subparsers, "sandbox_renew", "renew sandbox from the pipeline",
        [
            {"name": "pipeline", "help": "renew sandbox for this pipeline"},
            {"name": "pipeline-env", "help": "the environment on the pipeline (default: stage)", "default": "stage"},
            {"name": "property", "help": "name of the property manager config"},
            {"name": "property-domain", "help": "domain to use with the property manager config"}
        ],
        [
            {"name": "type", "help": "configure the sandbox with a local pipeline checkout or use a config from property manager. (pipeline|property)"}
        ]
    )

    args = parser.parse_args()

    if len(sys.argv) <= 1:
        parser.print_help()
        return 0

    if args.command == "help":
        if len(args.args) > 0:
            if actions[args.args[0]]:
                actions[args.args[0]].print_help()
        else:
            parser.prog = get_prog_name() + " help [command]"
            parser.print_help()
        return 0

    # Override log level if user wants to run in debug mode
    # Set Log Level to DEBUG, INFO, WARNING, ERROR, CRITICAL
    if args.debug:
        root_logger.setLevel(logging.DEBUG)
        root_logger.info('Loglevel debug is activated.')

    # confirm setup
    confirm_setup()

    # Setup logging in file
    if not os.path.exists('logs'):
        os.makedirs('logs')
    log_file = os.path.join('logs', cacheDir + '/logs/staging.log')

    logfile_handler = logging.FileHandler(log_file, mode='a')
    logfile_handler.setFormatter(log_formatter)
    root_logger.addHandler(logfile_handler)

    return getattr(sys.modules[__name__], args.command.replace("-", "_"))(args)

def create_sub_command(
        subparsers,
        command_name,
        help,
        optional_arguments=None,
        required_arguments=None):

    action = subparsers.add_parser(name=command_name, help=help, add_help=False)

    if required_arguments:
        required = action.add_argument_group("required arguments")
        for arg in required_arguments:
            name = arg["name"]
            del arg["name"]
            required.add_argument("--" + name,
                                  required=True,
                                  **arg)

    optional = action.add_argument_group("optional arguments")
    if optional_arguments:
        for arg in optional_arguments:
            name = arg["name"]
            del arg["name"]
            optional.add_argument("--" + name,
                                    required=False,
                                    **arg)

    if command_name != "hosts":
        optional.add_argument(
            "--edgerc",
            help="Location of the credentials file [$AKAMAI_EDGERC] (default: ~/.edgerc)",
            default=os.path.join(
                os.path.expanduser("~"),
                '.edgerc'))

        optional.add_argument(
            "--section",
            help="Section of the credentials file [$AKAMAI_EDGERC_SECTION] (default: papi)",
            default="papi")

    optional.add_argument(
        "--debug",
        help="DEBUG mode to generate additional logs for troubleshooting",
        action="store_true")

    return action

def check_additional_arguments(args):
    if args.type == "pipeline":
        if args.pipeline == None:
            print("please use argument --pipeline")
            exit(1)
    elif args.type == "property":
        if args.command != "sandbox_stop" and args.property == None:
            print("please use argument --property")
            exit(1)
        elif args.property_domain == None:
            print("please use argument --property-domain")
            exit(1)

def sandbox_start(args):
    root_logger.debug(args)

    check_additional_arguments(args)

    if re.match("~", args.pipeline_dir):
        args.pipeline_dir = args.pipeline_dir.replace("~", str(Path.home()))

    if args.type == "pipeline":
        domainSandbox = args.pipeline
        if args.pipeline_env == "stage":
            domainSandbox = domainSandbox.replace("www.", "www.stage.")
        containerName = "akamai-sandbox-"+args.pipeline+"-"+args.pipeline_env
    else:
        domainSandbox = args.property_domain
        containerName = "akamai-sandbox-"+domainSandbox

    root_logger.info("Sandbox Environment")
    root_logger.info("-------------------")
    if args.type == "pipeline":
        root_logger.info("Pipeline:\t\t"+args.pipeline)
        root_logger.info("Pipeline Directory:\t"+os.path.abspath(args.pipeline_dir))
        root_logger.info("Pipeline Environment:\t"+args.pipeline_env)
    else:
        root_logger.info("Property:\t\t"+args.property)
    root_logger.info("Sandbox Domain:\t\t"+domainSandbox)

    dockerClient = docker.from_env()
    if len(dockerClient.containers.list(filters={"name": containerName}, all=True)) > 0:
        root_logger.error('A container with the name "' + containerName + '" exist. Please shutdown and remove it.')
        return 1

    edgeRcSection = ''
    if args.section != '':
        edgeRcSection = '--section ' + args.section

    # create and start sandbox container
    root_logger.info("start sandbox container")
    volumes = {
        args.edgerc: {"bind": "/root/.edgerc", "mode": "rw"},
        str(Path.home()) +"/.akamai-cli/cache": {"bind": "/cli/.akamai-cli/cache", "mode": "rw"},
        str(Path.home()) +"/.akamai-cli/cache/staging-cli/sandboxes": {"bind": "/sandbox_helpers", "mode": "rw"}
    }
    environment = {
        "AK_SECTION": args.section,
        "AK_TYPE": args.type,
        "AK_DOMAIN": domainSandbox
    }
    if args.type == "pipeline":
        environment["AK_PIPELINE"] = args.pipeline,
        environment["AK_PIPELINE_ENV"] = args.pipeline_env
        volumes[os.path.abspath(args.pipeline_dir)] = {"bind": "/akamai-pipeline", "mode": "rw"}
    else:
        environment["AK_PROPERTY"] = args.property

    sandbox = dockerClient.containers.run(
        "akamai/akamai-docker",
        platform="linux/amd64", 
        detach=True,
        name=containerName,
        tty=True,
        ports={9550:443},
        environment=environment,
        volumes=volumes
    )
    sandbox.reload()
    while str(sandbox.status) != "running":
        root_logger.debug("Wait for status 'running'")
        time.sleep(5)
    root_logger.info("sandbox container startet")

    root_logger.info("check tls certificate")
    tlsCrtFile = "/cli/.akamai-cli/cache/staging-cli/certs/" + domainSandbox + ".crt"
    tlsKeyFile = "/cli/.akamai-cli/cache/staging-cli/certs/" + domainSandbox + ".key"
    tlsPemFile = "/cli/.akamai-cli/cache/staging-cli/certs/" + domainSandbox + ".pem"
    tlsLocalCrtFile = str(Path.home()) + "/.akamai-cli/cache/staging-cli/certs/" + domainSandbox + ".crt"
    tlsLocalKeyFile = str(Path.home()) + "/.akamai-cli/cache/staging-cli/certs/" + domainSandbox + ".key"
    tlsLocalPemFile = str(Path.home()) + "/.akamai-cli/cache/staging-cli/certs/" + domainSandbox + ".pem"
    tlsCertCreate = False
    if (
        not os.path.isfile(tlsLocalCrtFile) or os.path.getsize(tlsLocalCrtFile) == 0 or
        not os.path.isfile(tlsLocalKeyFile) or os.path.getsize(tlsLocalKeyFile) == 0
    ):
        root_logger.info("create tls certificate")
        (exit_code, output) = sandbox.exec_run(
            "openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout " + tlsKeyFile + " -out " + tlsCrtFile + " -subj \"/CN=" + domainSandbox + "\" -addext \"subjectAltName = DNS:" + domainSandbox + "\" -days 3650"
        )
        root_logger.info("tls certificate created")
    else:
        root_logger.info("tls certificate exist")

    root_logger.info("create ruletree")
    (exit_code, output) = sandbox.exec_run("mkdir /sandbox_helpers/ruletrees")
    if args.type == "pipeline":
        ruleTreeJson = "/sandbox_helpers/ruletrees/" + args.pipeline + "-" + args.pipeline_env + "-ruletrees.json"
        sandboxProperty = domainSandbox + "_ion"
        (exit_code, output) = sandbox.exec_run(
            [
                '/bin/bash', 
                '-c', 
                "akamai pipeline " + edgeRcSection + " sv -p " + args.pipeline + " " + args.pipeline_env
            ],
            workdir='/akamai-pipeline'
        )
        (exit_code, output) = sandbox.exec_run(
            [
                '/bin/bash', 
                '-c', 
                "akamai pipeline " + edgeRcSection + " show-ruletree -p " + args.pipeline + " " + args.pipeline_env + " > " + ruleTreeJson
            ],
            workdir='/akamai-pipeline'
        )
    else:
        ruleTreeJson = "/sandbox_helpers/ruletrees/" + domainSandbox + "-ruletrees.json"
        sandboxProperty = args.property
        (exit_code, output) = sandbox.exec_run([
            '/bin/bash', 
            '-c', 
            "akamai property " + edgeRcSection + " retrieve " + args.property + " > " + ruleTreeJson
        ])
    sandboxName = dockerClient.containers.get(containerName).short_id + "_" + domainSandbox
    root_logger.info("ruletree created")

    root_logger.info("create sandbox")
    root_logger.debug('akamai sandbox ' + edgeRcSection + " create -p " + sandboxProperty + " -n " + sandboxName)
    
    (exit_code, output) = sandbox.exec_run([
            '/bin/bash', 
            '-c', 
            'echo "Y" | akamai sandbox ' + edgeRcSection + " create -p " + sandboxProperty + " -n " + sandboxName
    ])
    resultSandboxCreate = output.decode()

    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c',
        'akamai sandbox list'
    ])
    if output.decode().find(sandboxName) < 0:
        root_logger.error("can't create sandbox")
        root_logger.error(resultSandboxCreate)
        return 1
    root_logger.info("sandbox created")

    root_logger.info("configure sandbox")
    configJson = "/cli/.akamai-cli/cache/sandbox-cli/sandboxes/" + sandboxName + "/config.json"
    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c', 
        "akamai sandbox " + edgeRcSection + " update --rules " + ruleTreeJson
    ])
    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c', 
        "cat " + configJson + " | jq '.sandboxServerInfo.secure = true' > /tmp/config1.json"
    ])
    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c', 
        "cat /tmp/config1.json | jq '.sandboxServerInfo.cert.certChainPath = \"" + tlsCrtFile + "\"' > /tmp/config2.json"
    ])
    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c', 
        "cat /tmp/config2.json | jq '.sandboxServerInfo.cert.keyPath = \"" + tlsKeyFile + "\"' > /tmp/config3.json"
    ])
    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c', 
        "mv /tmp/config3.json " + configJson + " ; rm /tmp/config?.json"
    ])
    root_logger.info("sandbox configured")

    root_logger.info("")
    root_logger.info("-------------------------------------------------")
    root_logger.info("Please add the following line to your /etc/hosts:")
    root_logger.info("127.0.0.1     " + domainSandbox)
    root_logger.info("-------------------------------------------------")
    root_logger.info("")

    root_logger.info("start sandbox")
    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c', 
        "akamai sandbox start &"
    ])
    # we must wait. why we start the sandbox in the background and the start of sandbox don't get a return value
    i = 0
    startSuccess = False
    while i < 20:
        time.sleep(15)
        root_logger.debug("recheck sandbox start")
        (exit_code, output) = sandbox.exec_run([
            '/bin/bash', 
            '-c', 
            "cat /cli/.akamai-cli/cache/sandbox-cli/sandboxes/" + sandboxName + "/logs/sandbox-client.log | grep \"Sandbox Client running on port\" | wc -l"
        ])

        try:
            if (int(output) > 0):
                startSuccess = True
                break
        except Exception:
            root_logger.debug("sandbox log dosn't exist")

        i += 1
    if startSuccess:
        root_logger.info("sandbox started successfully")
    else:
        root_logger.error("start sandbox failed")
        return 1

    root_logger.info("check pem file for tls certificate")
    if (not os.path.isfile(tlsLocalPemFile) or os.path.getsize(tlsLocalPemFile) == 0) or tlsCertCreate:
        root_logger.info("create pem file for tls certifiacte")
        (exit_code, output) = sandbox.exec_run([
            '/bin/bash',
            '-c',
            "echo '127.0.0.1     " + domainSandbox + "' >> /etc/hosts"
        ])
        (exit_code, output) = sandbox.exec_run([
            '/bin/bash',
            '-c',
            "openssl s_client -connect " + domainSandbox + ":9550 -showcerts </dev/null 2>/dev/null| openssl x509 -outform PEM > " + tlsPemFile
        ])
        root_logger.info("when you are asked, enter your password to add self-signed tls certificate to your local keychain")
        run_as_sudo("root", "/usr/bin/security add-trusted-cert -d -r trustRoot -p ssl -k /Library/Keychains/System.keychain " + tlsLocalPemFile)
        root_logger.info("pem file created and imported to your local keychain")
    else:
        root_logger.info("pem file for tls certifiacte exist")

    root_logger.info("")
    root_logger.info("Now you can connect to the sandbox: https://" + domainSandbox + '/')
    root_logger.info("")

def sandbox_stop(args):
    root_logger.debug(args)

    dockerClient = docker.from_env()

    check_additional_arguments(args)

    if args.type == "pipeline":
        domainSandbox = args.pipeline
        if args.pipeline_env == "stage":
            domainSandbox = domainSandbox.replace("www.", "www.stage.")
        containerName = "akamai-sandbox-"+args.pipeline+"-"+args.pipeline_env
    else:
        domainSandbox = args.property_domain
        containerName = "akamai-sandbox-"+domainSandbox

    if len(dockerClient.containers.list(filters={"name": containerName})) == 0:
        root_logger.info('No container with the name "' + containerName + '" exist. Nothing to do.')
        return 1

    sandbox = dockerClient.containers.get(containerName)

    edgeRcSection = ''
    (exit_code, output) = sandbox.exec_run(
        [
            '/bin/bash', 
            '-c', 
            "echo $AK_SECTION"
        ]
    )
    edgeRcSection = '--section ' + output.decode().strip()

    root_logger.info("cleanup sandbox ")
    sandboxName = dockerClient.containers.get(containerName).short_id + "_" + domainSandbox

    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c',
        'akamai sandbox list | grep YES | awk \'{ print $3 }\''
    ])
    if len(output.decode()) > 0:
        sandboxId = output.decode().strip()
        root_logger.info("Delete sandbox with id " + sandboxId)

        (exit_code, output) = sandbox.exec_run([
                '/bin/bash', 
                '-c', 
                'echo "Y" | akamai sandbox ' + edgeRcSection + " delete " + sandboxId
        ])
        resultSandboxDelete = output.decode()

        (exit_code, output) = sandbox.exec_run([
            '/bin/bash', 
            '-c',
            'akamai sandbox list | grep YES | awk \'{ print $3 }\''
        ])
        if len(output.decode()) > 0:
            print("can't delete sandbox")
            return 1

        root_logger.info("")
        root_logger.info("------------------------------------------------------")
        root_logger.info("Please remove the following line from your /etc/hosts:")
        root_logger.info("127.0.0.1     " + domainSandbox)
        root_logger.info("------------------------------------------------------")
        root_logger.info("")

    root_logger.info("stop sandbox container "+containerName)
    sandbox.stop()
    sandbox.remove()
    root_logger.info("sandbox container stopped")

def sandbox_renew(args):
    root_logger.debug(args)

    dockerClient = docker.from_env()

    check_additional_arguments(args)

    if args.type == "pipeline":
        domainSandbox = args.pipeline
        if args.pipeline_env == "stage":
            domainSandbox = domainSandbox.replace("www.", "www.stage.")
        containerName = "akamai-sandbox-"+args.pipeline+"-"+args.pipeline_env
    else:
        domainSandbox = args.property_domain
        containerName = "akamai-sandbox-"+domainSandbox

    if len(dockerClient.containers.list(filters={"name": containerName})) == 0:
        root_logger.error('No container with the name "' + containerName + '" exist. Nothing to do.')
        return 1

    sandbox = dockerClient.containers.get(containerName)

    edgeRcSection = ''
    (exit_code, output) = sandbox.exec_run(
        [
            '/bin/bash', 
            '-c', 
            "echo $AK_SECTION"
        ]
    )
    edgeRcSection = '--section ' + output.decode().strip()

    root_logger.info("recreate ruletree based on pipeline")
    if args.type == "pipeline":
        ruleTreeJson = "/sandbox_helpers/ruletrees/" + args.pipeline + "-" + args.pipeline_env + "-ruletrees.json"
        sandboxProperty = domainSandbox + "_ion"
        (exit_code, output) = sandbox.exec_run(
            [
                '/bin/bash', 
                '-c', 
                "akamai pipeline " + edgeRcSection + " sv -p " + args.pipeline + " " + args.pipeline_env
            ],
            workdir='/akamai-pipeline'
        )
        (exit_code, output) = sandbox.exec_run(
            [
                '/bin/bash', 
                '-c', 
                "akamai pipeline " + edgeRcSection + " show-ruletree -p " + args.pipeline + " " + args.pipeline_env + " > " + ruleTreeJson
            ],
            workdir='/akamai-pipeline'
        )
    else:
        ruleTreeJson = "/sandbox_helpers/ruletrees/" + domainSandbox + "-ruletrees.json"
        sandboxProperty = args.property
        (exit_code, output) = sandbox.exec_run([
            '/bin/bash', 
            '-c', 
            "akamai property " + edgeRcSection + " retrieve " + sandboxProperty + " > " + ruleTreeJson
        ])

    root_logger.info("update sandbox with new ruletree")
    (exit_code, output) = sandbox.exec_run([
        '/bin/bash', 
        '-c', 
        "akamai sandbox " + edgeRcSection + " update --rules " + ruleTreeJson
    ])
    root_logger.info("sandbox updated")

def hosts(args):
    if not isinstance(args.domains, type(None)):
        root_logger.info("Domain(s) for staging: "+args.domains)

        domains = args.domains.split(',')

        domainsHosts = []

        for domain in domains:
            try:
                answer = dns.resolver.resolve(domain, 'CNAME')
            except Exception:
                root_logger.error("can't resolve domain "+domain)
            else:
                if len(answer) > 0:
                    cname = str(answer[0])
                    if cname.find('edgekey.net') >= 0:
                        cnameStaging = cname.replace('edgekey.net.', 'edgekey-staging.net')
                        ipStaging = dns.resolver.resolve(cnameStaging)
                        if len(ipStaging) > 0:
                            domainsHosts.append(str(ipStaging[0])+"\t"+domain)
                        else:
                            root_logger.error('No ip address for '+cnameStaging+' found')
                    else:
                        root_logger.error("No Akamai CNAME for "+domain)

                else:
                    root_logger.error("No CNAME found for "+domain)

        if len(domainsHosts) > 0:
            root_logger.info("")
            root_logger.info("Entry for /etc/hosts:")
            root_logger.info("---------------------")
            for entry in domainsHosts:
                root_logger.info(entry)
            root_logger.info("")
    else:
        root_logger.error("No domain given")

def confirm_setup():
    global cacheDir

    cacheDir = get_cache_dir()+'/staging-cli'
    if not os.access(cacheDir, os.W_OK):
        print(
            "Cache not found. You must create it to continue [Y/n]:",
            end=' '
        )

        if str.lower(input()) == 'n':
            root_logger.debug('Cache dir shoud not be created. Exiting.')
            exit(1)
        else:
            os.mkdir(cacheDir, 0o0755)
            if not os.access(cacheDir, os.W_OK):
                root_logger.error("Cache dir can't created. Exiting.")
                exit(1)
            os.mkdir(cacheDir+'/certs', 0o0755)
            if not os.access(cacheDir+'/certs', os.W_OK):
                root_logger.error("Cache dir can't created. Exiting.")
                exit(1)
            os.mkdir(cacheDir+'/logs', 0o0755)
            if not os.access(cacheDir+'/logs', os.W_OK):
                root_logger.error("Cache dir can't created. Exiting.")
                exit(1)
            os.mkdir(cacheDir+'/sandboxes', 0o0755)
            if not os.access(cacheDir+'/sandboxes', os.W_OK):
                root_logger.error("Cache dir can't created. Exiting.")
                exit(1)
            root_logger.debug('Cache dir created')

    return

def get_cache_dir():
    if os.getenv("AKAMAI_CLI_CACHE_DIR"):
        return os.getenv("AKAMAI_CLI_CACHE_DIR")

    result = subprocess.run(["akamai config get cli.cache-path"], check=True, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0:
        return result.stdout.decode().strip()

    return os.curdir

def get_prog_name():
    prog = os.path.basename(sys.argv[0])
    if os.getenv("AKAMAI_CLI"):
        prog = "akamai staging"
    return prog

if __name__ == '__main__':
    main()
