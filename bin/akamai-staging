#!/usr/bin/env python

import argparse
from dns.resolver import dns
import json
import logging
import os
from pathlib import Path
from sudo import run_as_sudo
import sys


PACKAGE_VERSION = 'n/a'

# Setup logging in console
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_formatter = logging.Formatter("%(message)s")
root_logger = logging.getLogger()

console_handler = logging.StreamHandler()
console_handler.setFormatter(console_formatter)
root_logger.addHandler(console_handler)

# Set Log Level to DEBUG, INFO, WARNING, ERROR, CRITICAL
root_logger.setLevel(logging.INFO)

def main():
    global cacheDir

    with open(str(Path(__file__).parent)+'/../cli.json') as f:
        data = json.loads(f.read())
        PACKAGE_VERSION = data['commands'][0]['version']
        f.close()

    parser = argparse.ArgumentParser(
        description='Akamai CLI for staging akamaized domains',
        add_help=True,
        prog=get_prog_name())

    parser.add_argument(
        '--version',
        action='version',
        version='%(prog)s ' +
                PACKAGE_VERSION)

    parser.add_argument("domains", help="akamaized domain(s) to staging")

    args = parser.parse_args()

    domains(args.domains)

    #return getattr(sys.modules[__name__], args.command.replace("-", "_"))(args)

def create_sub_command(
        subparsers,
        command_name,
        help,
        optional_arguments=None,
        required_arguments=None):

    action = subparsers.add_parser(name=command_name, help=help, add_help=False)

    if required_arguments:
        required = action.add_argument_group("required arguments")
        for arg in required_arguments:
            name = arg["name"]
            del arg["name"]
            required.add_argument("--" + name,
                                  required=True,
                                  **arg)

    optional = action.add_argument_group("optional arguments")
    if optional_arguments:
        for arg in optional_arguments:
            name = arg["name"]
            del arg["name"]
            optional.add_argument("--" + name,
                                    required=False,
                                    **arg)

    return action

def domains(domains):
    root_logger.info("Domain(s) for staging: "+domains)

    domains = domains.split(',')
    domainsHosts = []

    for domain in domains:
        try:
            answer = dns.resolver.resolve(domain, 'CNAME')
        except Exception:
            root_logger.error("no CNAME for domain "+domain)
        else:
            if len(answer) > 0:
                cname = str(answer[0])
                if cname.find('edgekey.net') >= 0:
                    cnameStaging = cname.replace('edgekey.net.', 'edgekey-staging.net')
                    ipStaging = dns.resolver.resolve(cnameStaging)
                    if len(ipStaging) > 0:
                        domainsHosts.append(str(ipStaging[0])+"\t"+domain)
                    else:
                        root_logger.error('No ip address for '+cnameStaging+' found')
                else:
                    root_logger.error("No Akamai CNAME for "+domain)

            else:
                root_logger.error("No CNAME found for "+domain)

    if len(domainsHosts) > 0:
        root_logger.info("")
        root_logger.info("Entry for /etc/hosts:")
        root_logger.info("---------------------")
        for entry in domainsHosts:
            root_logger.info(entry)
        root_logger.info("")

def get_prog_name():
    prog = os.path.basename(sys.argv[0])
    if os.getenv("AKAMAI_CLI"):
        prog = "akamai staging"
    return prog

if __name__ == '__main__':
    main()
